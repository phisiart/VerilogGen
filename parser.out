Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> IDENTIFIER LBRACE INPUT COLON input_list OUTPUT COLON output_list RULES COLON rules_list RBRACE
Rule 2     input_list -> input_list input
Rule 3     input_list -> input
Rule 4     dispatch -> IDENTIFIER LSQUARE NUMBER RSQUARE
Rule 5     dispatch -> IDENTIFIER
Rule 6     input -> dispatch SEMICOLON
Rule 7     output_list -> output_list output
Rule 8     output_list -> output
Rule 9     output -> dispatch SEMICOLON
Rule 10    rules_list -> rules_list rule
Rule 11    rules_list -> rule
Rule 12    rule -> spec ARROW spec SEMICOLON
Rule 13    spec -> spec COMMA assign
Rule 14    spec -> assign
Rule 15    assign -> dispatch EQUAL NUMBER

Terminals, with rules where they appear

ARROW                : 12
COLON                : 1 1 1
COMMA                : 13
EQUAL                : 15
IDENTIFIER           : 1 4 5
INPUT                : 1
LBRACE               : 1
LSQUARE              : 4
NUMBER               : 4 15
OUTPUT               : 1
RBRACE               : 1
RSQUARE              : 4
RULES                : 1
SEMICOLON            : 6 9 12
error                : 

Nonterminals, with rules where they appear

assign               : 13 14
dispatch             : 6 9 15
input                : 2 3
input_list           : 1 2
output               : 7 8
output_list          : 1 7
program              : 0
rule                 : 10 11
rules_list           : 1 10
spec                 : 12 12 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . IDENTIFIER LBRACE INPUT COLON input_list OUTPUT COLON output_list RULES COLON rules_list RBRACE

    IDENTIFIER      shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> IDENTIFIER . LBRACE INPUT COLON input_list OUTPUT COLON output_list RULES COLON rules_list RBRACE

    LBRACE          shift and go to state 3


state 3

    (1) program -> IDENTIFIER LBRACE . INPUT COLON input_list OUTPUT COLON output_list RULES COLON rules_list RBRACE

    INPUT           shift and go to state 4


state 4

    (1) program -> IDENTIFIER LBRACE INPUT . COLON input_list OUTPUT COLON output_list RULES COLON rules_list RBRACE

    COLON           shift and go to state 5


state 5

    (1) program -> IDENTIFIER LBRACE INPUT COLON . input_list OUTPUT COLON output_list RULES COLON rules_list RBRACE
    (2) input_list -> . input_list input
    (3) input_list -> . input
    (6) input -> . dispatch SEMICOLON
    (4) dispatch -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (5) dispatch -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    input                          shift and go to state 9
    input_list                     shift and go to state 7
    dispatch                       shift and go to state 6

state 6

    (6) input -> dispatch . SEMICOLON

    SEMICOLON       shift and go to state 10


state 7

    (1) program -> IDENTIFIER LBRACE INPUT COLON input_list . OUTPUT COLON output_list RULES COLON rules_list RBRACE
    (2) input_list -> input_list . input
    (6) input -> . dispatch SEMICOLON
    (4) dispatch -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (5) dispatch -> . IDENTIFIER

    OUTPUT          shift and go to state 11
    IDENTIFIER      shift and go to state 8

    input                          shift and go to state 12
    dispatch                       shift and go to state 6

state 8

    (4) dispatch -> IDENTIFIER . LSQUARE NUMBER RSQUARE
    (5) dispatch -> IDENTIFIER .

    LSQUARE         shift and go to state 13
    SEMICOLON       reduce using rule 5 (dispatch -> IDENTIFIER .)
    EQUAL           reduce using rule 5 (dispatch -> IDENTIFIER .)


state 9

    (3) input_list -> input .

    OUTPUT          reduce using rule 3 (input_list -> input .)
    IDENTIFIER      reduce using rule 3 (input_list -> input .)


state 10

    (6) input -> dispatch SEMICOLON .

    OUTPUT          reduce using rule 6 (input -> dispatch SEMICOLON .)
    IDENTIFIER      reduce using rule 6 (input -> dispatch SEMICOLON .)


state 11

    (1) program -> IDENTIFIER LBRACE INPUT COLON input_list OUTPUT . COLON output_list RULES COLON rules_list RBRACE

    COLON           shift and go to state 14


state 12

    (2) input_list -> input_list input .

    OUTPUT          reduce using rule 2 (input_list -> input_list input .)
    IDENTIFIER      reduce using rule 2 (input_list -> input_list input .)


state 13

    (4) dispatch -> IDENTIFIER LSQUARE . NUMBER RSQUARE

    NUMBER          shift and go to state 15


state 14

    (1) program -> IDENTIFIER LBRACE INPUT COLON input_list OUTPUT COLON . output_list RULES COLON rules_list RBRACE
    (7) output_list -> . output_list output
    (8) output_list -> . output
    (9) output -> . dispatch SEMICOLON
    (4) dispatch -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (5) dispatch -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    output                         shift and go to state 16
    dispatch                       shift and go to state 17
    output_list                    shift and go to state 18

state 15

    (4) dispatch -> IDENTIFIER LSQUARE NUMBER . RSQUARE

    RSQUARE         shift and go to state 19


state 16

    (8) output_list -> output .

    RULES           reduce using rule 8 (output_list -> output .)
    IDENTIFIER      reduce using rule 8 (output_list -> output .)


state 17

    (9) output -> dispatch . SEMICOLON

    SEMICOLON       shift and go to state 20


state 18

    (1) program -> IDENTIFIER LBRACE INPUT COLON input_list OUTPUT COLON output_list . RULES COLON rules_list RBRACE
    (7) output_list -> output_list . output
    (9) output -> . dispatch SEMICOLON
    (4) dispatch -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (5) dispatch -> . IDENTIFIER

    RULES           shift and go to state 22
    IDENTIFIER      shift and go to state 8

    output                         shift and go to state 21
    dispatch                       shift and go to state 17

state 19

    (4) dispatch -> IDENTIFIER LSQUARE NUMBER RSQUARE .

    SEMICOLON       reduce using rule 4 (dispatch -> IDENTIFIER LSQUARE NUMBER RSQUARE .)
    EQUAL           reduce using rule 4 (dispatch -> IDENTIFIER LSQUARE NUMBER RSQUARE .)


state 20

    (9) output -> dispatch SEMICOLON .

    RULES           reduce using rule 9 (output -> dispatch SEMICOLON .)
    IDENTIFIER      reduce using rule 9 (output -> dispatch SEMICOLON .)


state 21

    (7) output_list -> output_list output .

    RULES           reduce using rule 7 (output_list -> output_list output .)
    IDENTIFIER      reduce using rule 7 (output_list -> output_list output .)


state 22

    (1) program -> IDENTIFIER LBRACE INPUT COLON input_list OUTPUT COLON output_list RULES . COLON rules_list RBRACE

    COLON           shift and go to state 23


state 23

    (1) program -> IDENTIFIER LBRACE INPUT COLON input_list OUTPUT COLON output_list RULES COLON . rules_list RBRACE
    (10) rules_list -> . rules_list rule
    (11) rules_list -> . rule
    (12) rule -> . spec ARROW spec SEMICOLON
    (13) spec -> . spec COMMA assign
    (14) spec -> . assign
    (15) assign -> . dispatch EQUAL NUMBER
    (4) dispatch -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (5) dispatch -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    rules_list                     shift and go to state 24
    rule                           shift and go to state 25
    assign                         shift and go to state 28
    dispatch                       shift and go to state 27
    spec                           shift and go to state 26

state 24

    (1) program -> IDENTIFIER LBRACE INPUT COLON input_list OUTPUT COLON output_list RULES COLON rules_list . RBRACE
    (10) rules_list -> rules_list . rule
    (12) rule -> . spec ARROW spec SEMICOLON
    (13) spec -> . spec COMMA assign
    (14) spec -> . assign
    (15) assign -> . dispatch EQUAL NUMBER
    (4) dispatch -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (5) dispatch -> . IDENTIFIER

    RBRACE          shift and go to state 29
    IDENTIFIER      shift and go to state 8

    rule                           shift and go to state 30
    assign                         shift and go to state 28
    dispatch                       shift and go to state 27
    spec                           shift and go to state 26

state 25

    (11) rules_list -> rule .

    RBRACE          reduce using rule 11 (rules_list -> rule .)
    IDENTIFIER      reduce using rule 11 (rules_list -> rule .)


state 26

    (12) rule -> spec . ARROW spec SEMICOLON
    (13) spec -> spec . COMMA assign

    ARROW           shift and go to state 32
    COMMA           shift and go to state 31


state 27

    (15) assign -> dispatch . EQUAL NUMBER

    EQUAL           shift and go to state 33


state 28

    (14) spec -> assign .

    ARROW           reduce using rule 14 (spec -> assign .)
    COMMA           reduce using rule 14 (spec -> assign .)
    SEMICOLON       reduce using rule 14 (spec -> assign .)


state 29

    (1) program -> IDENTIFIER LBRACE INPUT COLON input_list OUTPUT COLON output_list RULES COLON rules_list RBRACE .

    $end            reduce using rule 1 (program -> IDENTIFIER LBRACE INPUT COLON input_list OUTPUT COLON output_list RULES COLON rules_list RBRACE .)


state 30

    (10) rules_list -> rules_list rule .

    RBRACE          reduce using rule 10 (rules_list -> rules_list rule .)
    IDENTIFIER      reduce using rule 10 (rules_list -> rules_list rule .)


state 31

    (13) spec -> spec COMMA . assign
    (15) assign -> . dispatch EQUAL NUMBER
    (4) dispatch -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (5) dispatch -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    dispatch                       shift and go to state 27
    assign                         shift and go to state 34

state 32

    (12) rule -> spec ARROW . spec SEMICOLON
    (13) spec -> . spec COMMA assign
    (14) spec -> . assign
    (15) assign -> . dispatch EQUAL NUMBER
    (4) dispatch -> . IDENTIFIER LSQUARE NUMBER RSQUARE
    (5) dispatch -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    spec                           shift and go to state 35
    dispatch                       shift and go to state 27
    assign                         shift and go to state 28

state 33

    (15) assign -> dispatch EQUAL . NUMBER

    NUMBER          shift and go to state 36


state 34

    (13) spec -> spec COMMA assign .

    ARROW           reduce using rule 13 (spec -> spec COMMA assign .)
    COMMA           reduce using rule 13 (spec -> spec COMMA assign .)
    SEMICOLON       reduce using rule 13 (spec -> spec COMMA assign .)


state 35

    (12) rule -> spec ARROW spec . SEMICOLON
    (13) spec -> spec . COMMA assign

    SEMICOLON       shift and go to state 37
    COMMA           shift and go to state 31


state 36

    (15) assign -> dispatch EQUAL NUMBER .

    ARROW           reduce using rule 15 (assign -> dispatch EQUAL NUMBER .)
    COMMA           reduce using rule 15 (assign -> dispatch EQUAL NUMBER .)
    SEMICOLON       reduce using rule 15 (assign -> dispatch EQUAL NUMBER .)


state 37

    (12) rule -> spec ARROW spec SEMICOLON .

    RBRACE          reduce using rule 12 (rule -> spec ARROW spec SEMICOLON .)
    IDENTIFIER      reduce using rule 12 (rule -> spec ARROW spec SEMICOLON .)

